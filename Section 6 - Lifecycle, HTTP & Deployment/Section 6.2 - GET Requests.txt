----------------------------------------
GET REQUESTS
----------------------------------------
- GET is a HTTP request which as its name suggests, gets data from a back-end database.
- We can use the native Fetch API to make a GET request.
- We can also use Axios, which is a small library that deals with HTTP.
- We will be using https://jsonplaceholder.typicode.com/ as our Fake REST Api to test the HTTP request.

GET Request Test:
- In our Test.js file we placed the GET HTTP request code from jsonplaceholder website in our componentDidMount() Lifecycle method to test the Fetch API GET request:

   componentDidMount(){
      fetch('https://jsonplaceholder.typicode.com/todos/1')
         .then(response => response.json())
         .then(json => console.log(json))
   }

- The Fetch API returns a promise, we would need to use the .then() to map the response to a json and we would need a secondary .then() to get the data which we are console.log. The above code can be written alternatively as (using data instead of json on the secondary .then line):

   componentDidMount(){
      fetch('https://jsonplaceholder.typicode.com/todos/1')
         .then(response => response.json())
         .then(data => console.log(json))
   }

- Usually you would put the GET data into your state. So initially you would have a state with empty objects:

   state = {
      title: '',
      body: ''
   }

- We will want to fill the state when we Fetch the data using the GET HTTP request. So replacing the console.log we will map the data to our state:

   componentDidMount(){
      fetch('https://jsonplaceholder.typicode.com/todos/1')
         .then(response => response.json())
         .then(data => this.setState({
            title: data.title,
            body: data.body
         }))
   }

- Note we do not need an arrow function in the code above because we are using a Lifecycle method.
- If we look in the React Tools in our browser we can see the Test component has a new State of the GET request data.
- We can render() this new data on our screen:

   render() {
      const { title, body } = this.state;
      return (
         <div>
            <h1>{ title }</h1>
            <p>{ body }</p>
         </div>
      )
   }

- We have successfully fetched data from an API and put it into our State and rendered it out onto the browser screen.

- We are now going to do the same with our application using the https://jsonplaceholder.typicode.com to fetch users from the API and display their contact details within our Contact List of our application.
- We will need to do this within our context.js file because that is where our State is located for our contacts.

Context.js File
- The contacts array is now an empty object:

   state = {
      contacts: [],
      dispatch: action => this.setState(state => reducer(state, action))
   };

- We need to use the componentDidMount() Lifecycle method.
- We need to install the Axios library in our project by going into terminal to our application directory and entering the following command:

   > npm i axios

(Note you could use the Fetch API for this, but we are going to use axios)
- We need to import axios into our context.js file in order to use the library:

   import axios from 'axios';

- In the componentDidMount() Lifecycle method we need to add:

   componentDidMount(){
      axios.get('https://jsonplaceholder.typicode.com/users')
   }

- We pass is the url which contains the users (pretending this is our own backend API). This will return a promise, we will use the .then access the response (res) and use the res.data (i.e. the json file) to map it to our State.

   componentDidMount(){
      axios.get('https://jsonplaceholder.typicode.com/users')
      .then(res => this.setState({ contacts: res.data }));
   }

- This will now GET the users data from the API and loop through the JSON data to extract the name, email and phone details for each contact. We should now have a list of 10 users.